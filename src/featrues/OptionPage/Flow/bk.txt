import { Button } from "@mui/material";
import { useEffect, useLayoutEffect, useState } from "react";
import ReactFlow, { useNodesState, useEdgesState, ReactFlowProvider, Controls, Background, useReactFlow, Node, Edge, useNodesInitialized, MarkerType, useStore, useStoreApi } from "reactflow";

export const Flow = (props: { nodes: HierarchyNode[] }) => {

    return (
        <ReactFlowProvider>
            <FlowInner nodes={props.nodes}></FlowInner>
        </ReactFlowProvider>
    )
}

const FlowInner = (props: { nodes: HierarchyNode[] }) => {

    const [nodes, setNodes, onNodesChange] = useNodesState([]);
    const [edges, setEdges, onEdgesChange] = useEdgesState([]);

    useEffect(() => {

        const { initNodes, initEdges } = createNodesAndEdges(props.nodes);

        setNodes(initNodes);
        setEdges(initEdges);

    }, [props.nodes]);

    return (
        <ReactFlow nodesDraggable={true} nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange}>
            <AutoLayout/>
            <Controls />
            <Background />
            <Button onClick={() => setNodes(nodes => [...nodes, { id: "test", data: { label: "test" }, position: { x: 0, y: 0 } }])}>ada</Button>
        </ReactFlow>
    )
}

//ノードツリーからReactFlow用にNode・Edge配列を作成するメソッド
const createNodesAndEdges = (hierarchyNodes: HierarchyNode[]): any => {

    const n: Node[] = [];
    const e: Edge[] = [];

    const aa = (nodes: HierarchyNode[], parentNode?: Node) => {

        for (const node of nodes) {

            const nNode: Node = {
                id: node.id,
                data: { label: node.data },
                position: { x: 0, y: 0 },
            };

            n.push(nNode);

            if (parentNode) {
                e.push({
                    id: crypto.randomUUID(),
                    source: parentNode.id,
                    target: nNode.id,
                    type: 'smoothstep',
                    markerEnd: {
                        type: MarkerType.ArrowClosed,
                    },
                })
            }

            aa(node.children, nNode);
        }
    }

    //再帰呼出し
    aa(hierarchyNodes);

    return {
        initNodes: n,
        initEdges: e,
    }
}

const options = { includeHiddenNodes: false };
const getParentNodeId = (node: Node, edges: Edge[]) => edges.find(edge => edge.target == node.id)?.source;
const getNodeFromId = (id: string, nodes: any[]) => nodes.find(n => n.id == id);

function _AutoLayout() {

    console.log("aaa");

    const { getNodes, setNodes, getEdges, setEdges } = useReactFlow();
    const store = useStoreApi();
    const state = store.getState();

    const nodes = Array.from(state.nodeInternals.values());
    const edges = [ ...getEdges() ];

    // state.edges.length = 0;
    console.log(edges);

    // setEdges([]);

    //ノード間関係配列作成
    const exnodes = nodes.map(node => ({
        id: node.id,
        parentId: getParentNodeId(node, edges),
        size: { width: node.width ?? 0, height: node.height ?? 0 },
        div: { width: node.width ?? 0, height: node.height ?? 0 },
        pos: { x: 0, y: 0 },
        paddingPos: { x: 0, y: 0 },
    }));

    const topMargin = 64;
    const leftMargin = 32;
    const widthArray: { [key: string]: number } = {};

    let lastTopNode = undefined;

    for (const node of exnodes) {

        if (node.parentId) {

            const parentNode = getNodeFromId(node.parentId, exnodes);

            if (parentNode) {
                const pos = { x: parentNode.pos.x, y: parentNode.pos.y + parentNode.size.height + topMargin };
                node.pos = { ...pos };
                node.paddingPos = { ...pos };
            }

            const baseX = widthArray[node.parentId];

            if (baseX != undefined) {

                node.pos.x += baseX;
                node.paddingPos.x += baseX;

                let pid = node.parentId;

                while (pid != undefined) {
                    const pnode = getNodeFromId(pid, exnodes);
                    widthArray[pid] += node.size.width + leftMargin;
                    pnode.paddingPos.x = pnode.pos.x + (widthArray[pid] / 2) - (node.size.width / 2) - (leftMargin / 2);
                    pid = pnode.parentId;
                }
            }
            else {
                widthArray[node.parentId] = node.size.width + leftMargin;
            }
        }
        else {

            const defx = (lastTopNode?.pos.x ?? 0) + (widthArray[lastTopNode?.id ?? ""] ?? 0);
            node.pos.x = defx;
            node.paddingPos.x = defx;
            lastTopNode = node;
        }
    }

    for (const node of exnodes) {
        const n = state.nodeInternals.get(node.id);

        if (n) {

            if (n.position.x != node.paddingPos.x) {
                n.position.x = node.paddingPos.x;
            }

            if (n.position.y != node.paddingPos.y) {
                n.position.y = node.paddingPos.y;
            }


            // n.position.y = node.paddingPos.y;
        }
    }

    // state.edges.push([...edges]);

    return <></>
}

//自動レイアウトする内部用コンポーネント
// function AutoLayout( props: { onInitialized: (nodes: Node[]) => void }) {
// function _AutoLayout() {

//     console.log("aaa");

//     const { getNodes, setNodes, getEdges, setEdges } = useReactFlow();
//     const store = useStoreApi();
//     const state = store.getState();

//     const nodes = Array.from(state.nodeInternals.values());
//     const edges = [ ...getEdges() ];

//     // state.edges.length = 0;
//     console.log(edges);

//     // setEdges([]);

//     //ノード間関係配列作成
//     const exnodes = nodes.map(node => ({
//         id: node.id,
//         parentId: getParentNodeId(node, edges),
//         size: { width: node.width ?? 0, height: node.height ?? 0 },
//         div: { width: node.width ?? 0, height: node.height ?? 0 },
//         pos: { x: 0, y: 0 },
//         paddingPos: { x: 0, y: 0 },
//     }));

//     const topMargin = 64;
//     const leftMargin = 32;
//     const widthArray: { [key: string]: number } = {};

//     let lastTopNode = undefined;

//     for (const node of exnodes) {

//         if (node.parentId) {

//             const parentNode = getNodeFromId(node.parentId, exnodes);

//             if (parentNode) {
//                 const pos = { x: parentNode.pos.x, y: parentNode.pos.y + parentNode.size.height + topMargin };
//                 node.pos = { ...pos };
//                 node.paddingPos = { ...pos };
//             }

//             const baseX = widthArray[node.parentId];

//             if (baseX != undefined) {

//                 node.pos.x += baseX;
//                 node.paddingPos.x += baseX;

//                 let pid = node.parentId;

//                 while (pid != undefined) {
//                     const pnode = getNodeFromId(pid, exnodes);
//                     widthArray[pid] += node.size.width + leftMargin;
//                     pnode.paddingPos.x = pnode.pos.x + (widthArray[pid] / 2) - (node.size.width / 2) - (leftMargin / 2);
//                     pid = pnode.parentId;
//                 }
//             }
//             else {
//                 widthArray[node.parentId] = node.size.width + leftMargin;
//             }
//         }
//         else {

//             const defx = (lastTopNode?.pos.x ?? 0) + (widthArray[lastTopNode?.id ?? ""] ?? 0);
//             node.pos.x = defx;
//             node.paddingPos.x = defx;
//             lastTopNode = node;
//         }
//     }

//     for (const node of exnodes) {
//         const n = state.nodeInternals.get(node.id);

//         if (n) {

//             if (n.position.x != node.paddingPos.x) {
//                 n.position.x = node.paddingPos.x;
//             }

//             if (n.position.y != node.paddingPos.y) {
//                 n.position.y = node.paddingPos.y;
//             }


//             // n.position.y = node.paddingPos.y;
//         }
//     }

//     // state.edges.push([...edges]);

//     return <></>
// }